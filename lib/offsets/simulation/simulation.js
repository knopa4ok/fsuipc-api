"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const offset_category_1 = require("./../../../shared/offset-category");
const offset_1 = require("./../../../shared/offset");
exports.simulation = {
    startupFlight: new offset_1.Offset({
        value: 0x24,
        name: 'startupFlight',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'startup path',
        type: 11 /* String */,
        length: 256,
        permission: 'r',
    }),
    logbookName: new offset_1.Offset({
        value: 0x12C,
        name: 'logbookName',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'logbook name - FS2002+',
        type: 11 /* String */,
        length: 256,
        permission: 'r',
    }),
    flightPlan: new offset_1.Offset({
        value: 0x130,
        name: 'flightPlan',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'current flight plan - FSX only',
        type: 11 /* String */,
        length: 256,
        permission: 'r',
    }),
    availableMemory: new offset_1.Offset({
        value: 0x24C,
        name: 'availableMemory',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'available FS memory - kb',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    trafficDensityAirline: new offset_1.Offset({
        value: 0x250,
        name: 'trafficDensityAirline',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'Airline traffic density percent',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    trafficDensityGA: new offset_1.Offset({
        value: 0x251,
        name: 'trafficDensityGA',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'General Aviation traffic density percent',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    trafficDensityShips: new offset_1.Offset({
        value: 0x252,
        name: 'trafficDensityShips',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'Ships and Ferries traffic density percent',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    cloudCoverDensity: new offset_1.Offset({
        value: 0x254,
        name: 'cloudCoverDensity',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'cloud cover density - 5-8',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    cloudComplex: new offset_1.Offset({
        value: 0x255,
        name: 'cloudComplex',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'cloud simple/complex - 0 = simple, 1 = complex',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    thermalVisualisation: new offset_1.Offset({
        value: 0x256,
        name: 'thermalVisualisation',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '0 = none, 1 = natural, 2 = schematic',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    memoryAssignedToFSUIPC: new offset_1.Offset({
        value: 0x258,
        name: 'memoryAssignedToFSUIPC',
        category: offset_category_1.OffsetCategory.SIMULATION,
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    pauseControl: new offset_1.Offset({
        value: 0x262,
        name: 'pauseControl',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'pause control (write only)',
        convert: '{VAL} ? 1 : 0',
        type: 5 /* UInt16 */,
        permission: 'w',
    }),
    pauseFlag: new offset_1.Offset({
        value: 0x264,
        name: 'pauseFlag',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'simulation paused',
        convert: '!!{VAL}',
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    framerate: new offset_1.Offset({
        value: 0x274,
        name: 'framerate',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'framerate',
        convert: 'Math.floor(32768/{VAL})',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    zoomfactor: new offset_1.Offset({
        value: 0x2B2,
        name: 'zoomfactor',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'zoom factor - FS2002+',
        convert: 'Math.floor({VAL}/64)',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    controlTimer1: new offset_1.Offset({
        value: 0x310,
        name: 'controlTimer1',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'control timer 1 - FS2002+ - Seconds',
        type: 8 /* Double */,
        permission: 'r',
    }),
    controlTimer2: new offset_1.Offset({
        value: 0x368,
        name: 'controlTimer2',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'control timer 2 - FS2002+',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    fuelBoxFlag: new offset_1.Offset({
        value: 0x32C,
        name: 'fuelBoxFlag',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'plane in fuel box flag',
        convert: '!!{VAL}',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    comFreqInc: new offset_1.Offset({
        value: 0x358,
        name: 'comFreqInc',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'COM freq increment - KHz',
        convert: '({VAL}) === 0 ? 50 : 25',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    adfFreqInc: new offset_1.Offset({
        value: 0x358,
        name: 'adfFreqInc',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'ADF freq increment - KHz',
        convert: '({VAL}) === 0 ? 1.0 : 0.1',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    reliability: new offset_1.Offset({
        value: 0x372,
        name: 'reliability',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'reliability - percent',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    lastSavedFlightName: new offset_1.Offset({
        value: 0x400,
        name: 'lastSavedFlightName',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'name of last saved flight',
        type: 11 /* String */,
        length: 128,
        permission: 'r',
    }),
    elapsedTime: new offset_1.Offset({
        value: 0x4A8,
        name: 'elapsedTime',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'simulated flight time - seconds (paused while simulation paused)',
        type: 8 /* Double */,
        permission: 'r',
    }),
    elapsedRealTime: new offset_1.Offset({
        value: 0x588,
        name: 'elapsedRealTime',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'elasped real time',
        type: 8 /* Double */,
        permission: 'r',
    }),
    smokeSystemAvailable: new offset_1.Offset({
        value: 0x5D4,
        name: 'smokeSystemAvailable',
        category: offset_category_1.OffsetCategory.SIMULATION,
        convert: '!!{VAL}',
        description: 'smoke system available - <= FS2000',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    slewMode: new offset_1.Offset({
        value: 0x5DC,
        name: 'slewMode',
        category: offset_category_1.OffsetCategory.SIMULATION,
        convert: '!!{VAL}',
        description: 'slew mode activated',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    slewRollRate: new offset_1.Offset({
        value: 0x5E4,
        name: 'slewRollRate',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '192 gives a 360 roll in about 1 minute - -ve right, +ve left',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    slewYawRate: new offset_1.Offset({
        value: 0x5E6,
        name: 'slewYawRate',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'Slew mode turns - +ve values are left, -ve are right - 24 takes about 1 minute to complete a 360',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    slewVerticalRate: new offset_1.Offset({
        value: 0x5E8,
        name: 'slewVerticalRate',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '16384=no alt slew rate - 16383 to 0 increasing slew UP rates, 16385 to 32767 increasing slew DOWN rates',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    slewBackwardForwardRate: new offset_1.Offset({
        value: 0x5EB,
        name: 'slewBackwardForwardRate',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'Slew fwd if-ve, bwd if +ve, 1=very slow ... 127=very fast, -128 fastest forward',
        type: 1 /* SByte */,
        permission: 'rw',
    }),
    slewLeftRightRate: new offset_1.Offset({
        value: 0x5ED,
        name: 'slewLeftRightRate',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'Slew left if -ve, right if +ve, 1=very slow ... 127=very fast, -128 fastest leftward',
        type: 1 /* SByte */,
        permission: 'rw',
    }),
    slewPitchRate: new offset_1.Offset({
        value: 0x5EE,
        name: 'slewPitchRate',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '16384=no pitch slew -16384 pitch up, 16384 pitch down, range 0-32767',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    slewModeDisplay: new offset_1.Offset({
        value: 0x5F4,
        name: 'slewModeDisplay',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '0=off, 1=coods/hdg/speed, 2=fps, 3=all',
        type: 5 /* UInt16 */,
    }),
    flightModeDisplay: new offset_1.Offset({
        value: 0x5FC,
        name: 'flightModeDisplay',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '0=off, 1=coods/hdg/speed, 2=fps, 3=all',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    replayInAction: new offset_1.Offset({
        value: 0x628,
        name: 'replayInAction',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'replay in action',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    replayTimerCountdown: new offset_1.Offset({
        value: 0x62C,
        name: 'replayTimerCountdown',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'instant replay time left in seconds - controls the playback',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    videoRecording: new offset_1.Offset({
        value: 0x760,
        name: 'videoRecording',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'video recording flag - FS2002+',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    flightAnalysisMode: new offset_1.Offset({
        value: 0x814,
        name: 'flightAnalysisMode',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '0=off 1=landing 2=course tracking 3=manoeuvres',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    crashDetection: new offset_1.Offset({
        value: 0x830,
        name: 'crashDetection',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '0=Ignore Crash, 1=Detect Crash and restart, 2=Detect Crash and show Graph (last is not applicable to FS2002/4)',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    crashDetectionFSX: new offset_1.Offset({
        value: 0x832,
        name: 'crashDetectionFSX',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '0=Ignore Crash, 1=Detect Crash',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    crashDetectionFSXAi: new offset_1.Offset({
        value: 0x833,
        name: 'crashDetectionFSXAi',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: '0=Ignore Crash, 1=Detect Crash',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    crashed: new offset_1.Offset({
        value: 0x840,
        name: 'crashed',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'crashed',
        convert: '!!{VAL}',
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    soundControl: new offset_1.Offset({
        value: 0xB20,
        name: 'soundControl',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'soundControl',
        convert: '!!{VAL}',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    soundActive: new offset_1.Offset({
        value: 0xB24,
        name: 'soundActive',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'soundActive',
        convert: '!!{VAL}',
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    scenaryComplexity: new offset_1.Offset({
        value: 0xB60,
        name: 'scenaryComplexity',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'scenary complexity - 0-5',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    internationalUnit: new offset_1.Offset({
        value: 0xC18,
        name: 'internationalUnit',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'international units',
        convert: '{VAL} === 0 ? `us` : {VAL} === 1 ? `metric_feet` : `metric_meters`',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    simulationRate: new offset_1.Offset({
        value: 0xC1A,
        name: 'simulationRate',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'international units',
        convert: '+({VAL} / 256).toFixed(2)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    localTimeString: new offset_1.Offset({
        value: 0xC20,
        name: 'localTimeString',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'local time string hh:mm:ss',
        type: 11 /* String */,
        length: 9,
        permission: 'r',
    }),
    realism: new offset_1.Offset({
        value: 0xC44,
        name: 'realism',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'realism - percent',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    textureQuality: new offset_1.Offset({
        value: 0xC92,
        name: 'textureQuality',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'texture quality - 0 to 3',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    macroOrLuaParameters: new offset_1.Offset({
        value: 0xD6C,
        name: 'macroOrLuaParameters',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'macro or LUA parameters',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    macroOrLuaString: new offset_1.Offset({
        value: 0xD70,
        name: 'macroOrLuaString',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'macro or LUA command',
        type: 11 /* String */,
        length: 40,
        permission: 'rw',
    }),
    internationalNSSetting: new offset_1.Offset({
        value: 0xD98,
        name: 'internationalNSSetting',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'international N/S setting - 2=north 3=south',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    internationalEWSetting: new offset_1.Offset({
        value: 0xD9C,
        name: 'internationalEWSetting',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'international E/W setting - 0=east 1=west',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    scenaryVariableUSRVAR: new offset_1.Offset({
        value: 0xDD6,
        name: 'scenaryVariableUSRVAR',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'scenary variable USRVAR 0312h',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    scenaryVariableUSRVAR2: new offset_1.Offset({
        value: 0xDD8,
        name: 'scenaryVariableUSRVAR2',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'scenary variable USRVAR2 0314h',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    scenaryVariableUSRVAR3: new offset_1.Offset({
        value: 0xDDA,
        name: 'scenaryVariableUSRVAR3',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'scenary variable USRVAR3 0316h',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    scenaryVariableUSRVAR4: new offset_1.Offset({
        value: 0xDDC,
        name: 'scenaryVariableUSRVAR4',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'scenary variable USRVAR4 0318h',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    scenaryVariableUSRVAR5: new offset_1.Offset({
        value: 0xDDE,
        name: 'scenaryVariableUSRVAR5',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'scenary variable USRVAR5 031Ah',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    groundSceneryShadows: new offset_1.Offset({
        value: 0x11A2,
        name: 'groundSceneryShadows',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'ground scenery shadows - on/off',
        convert: '{VAL} === 1',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    aircraftShadows: new offset_1.Offset({
        value: 0x11A4,
        name: 'aircraftShadows',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'aircraft shadows',
        convert: '!!{VAL}',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    aircraftReflections: new offset_1.Offset({
        value: 0x11B6,
        name: 'aircraftReflections',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'aircraft shadows',
        convert: '{VAL} === 2',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    unlimitedFuel: new offset_1.Offset({
        value: 0x123F,
        name: 'unlimitedFuel',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'unlimited fuel',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    textDisplayMode: new offset_1.Offset({
        value: 0x1274,
        name: 'textDisplayMode',
        category: offset_category_1.OffsetCategory.SIMULATION,
        description: 'text display mode (eg: ATIS) - 0=static 1=scroll',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
};
