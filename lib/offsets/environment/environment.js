"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const offset_category_1 = require("./../../../shared/offset-category");
const offset_1 = require("./../../../shared/offset");
exports.environment = {
    clockHour: new offset_1.Offset({
        value: 0x238,
        name: 'clockHour',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: '0-23',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    clockMin: new offset_1.Offset({
        value: 0x239,
        name: 'clockMin',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: '0-59',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    clockSec: new offset_1.Offset({
        value: 0x23A,
        name: 'clockSec',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: '0-59',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    zuluHour: new offset_1.Offset({
        value: 0x23B,
        name: 'zuluHour',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: '0-23 UTC',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    zuluMin: new offset_1.Offset({
        value: 0x23C,
        name: 'zuluMin',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: '0-59 UTC',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    zuluDayOfMonth: new offset_1.Offset({
        value: 0x23D,
        name: 'zuluDayOfMonth',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'day of month UTC - FSX only - count from 1',
        type: 0 /* Byte */,
        permission: 'r'
    }),
    dayOfYear: new offset_1.Offset({
        value: 0x23E,
        name: 'dayOfYear',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'day of year - count from 1',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    zuluYear: new offset_1.Offset({
        value: 0x240,
        name: 'zuluYear',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'year UTC',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    zuluMonthOfYear: new offset_1.Offset({
        value: 0x242,
        name: 'zuluMonthOfYear',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'month of year UTC - FSX only',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    zuluDayOfWeek: new offset_1.Offset({
        value: 0x243,
        name: 'zuluDayOfWeek',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'day of week UTC - FSX only',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    localMonthOfYear: new offset_1.Offset({
        value: 0x244,
        name: 'localMonthOfYear',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'local month of year - FSX only',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    localDayOfMonth: new offset_1.Offset({
        value: 0x245,
        name: 'localDayOfMonth',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'local day of month - FSX only',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    timezoneOffsetToZulu: new offset_1.Offset({
        value: 0x246,
        name: 'timezoneOffsetToZulu',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'timezone offset minutes to zulu - determines aircraft position (+ve = behind zulu, -ve = ahead zulu)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    season: new offset_1.Offset({
        value: 0x248,
        name: 'season',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'local season',
        convert: 'seasons',
        mapping: true,
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    localYear: new offset_1.Offset({
        value: 0x24A,
        name: 'localYear',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'local year',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    nearestAirportId: new offset_1.Offset({
        value: 0x658,
        name: 'nearestAirportId',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'nearest airport',
        type: 10 /* ByteArray */,
        length: 128,
        convert: 'nearestAirportsIds',
        mapping: true,
        permission: 'r',
    }),
    nearestAirportLatitude: new offset_1.Offset({
        value: 0x65C,
        name: 'nearestAirportLatitude',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'nearest airport latitude',
        type: 9 /* Single */,
        permission: 'r',
    }),
    nearestAirportLongitude: new offset_1.Offset({
        value: 0x660,
        name: 'nearestAirportLongitude',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'nearest airport longitude',
        type: 9 /* Single */,
        permission: 'r',
    }),
    nearestAirportAltitude: new offset_1.Offset({
        value: 0x664,
        name: 'nearestAirportAltitude',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'nearest airport altitude - ft',
        type: 9 /* Single */,
        permission: 'r',
    }),
    nearestAirportDistance: new offset_1.Offset({
        value: 0x668,
        name: 'nearestAirportDistance',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'nearest airport distance - NM',
        type: 9 /* Single */,
        permission: 'r',
    }),
    towerLatitude: new offset_1.Offset({
        value: 0xD50,
        name: 'towerLatitude',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'tower latitude',
        convert: '{VAL} * 90 / (10001750 * 65536 * 65536)',
        type: 4 /* Int64 */,
        permission: 'r',
    }),
    towerLongitude: new offset_1.Offset({
        value: 0xD58,
        name: 'towerLongitude',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'tower longitude',
        convert: '{VAL} * 360 / (65536 * 65536 * 65536 * 65536)',
        type: 4 /* Int64 */,
        permission: 'r',
    }),
    towerAltitude: new offset_1.Offset({
        value: 0xD60,
        name: 'towerAltitude',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'tower altitude',
        convert: '+({VAL} * 3.28084 / (65536 * 65536)).toFixed(2)',
        type: 4 /* Int64 */,
        permission: 'r',
    }),
    nearestWeatherStationId: new offset_1.Offset({
        value: 0xE80,
        name: 'nearestWeatherStationId',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'nearest weather station ICAO id',
        type: 11 /* String */,
        length: 4,
        permission: 'r',
    }),
    timeOfDay: new offset_1.Offset({
        value: 0x115E,
        name: 'timeOfDay',
        category: offset_category_1.OffsetCategory.ENVIRONMENT,
        description: 'time of day',
        type: 0 /* Byte */,
        permission: 'r',
    }),
};
