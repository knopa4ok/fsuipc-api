"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const offset_category_1 = require("./../../../shared/offset-category");
const offset_1 = require("./../../../shared/offset");
exports.autopilot = {
    autoPilotAvailable: new offset_1.Offset({
        value: 0x764,
        name: 'autoPilotAvailable',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'autopilot available',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    flyByWireELACSwitch: new offset_1.Offset({
        value: 0x7B6,
        name: 'flyByWireELACSwitch',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'fly by wire ELAC switch',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    flyByWireELACCompFailFlag: new offset_1.Offset({
        value: 0x7B7,
        name: 'flyByWireELACCompFailFlag',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'fly by wire ELAC comp fail flag (read only)',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    flyByWireFACSwitch: new offset_1.Offset({
        value: 0x7B8,
        name: 'flyByWireFACSwitch',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'fly by wire FAC switch',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    flyByWireFACCompFailFlag: new offset_1.Offset({
        value: 0x7B9,
        name: 'flyByWireFACCompFailFlag',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'fly by wire FAC comp fail flag (read only)',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    flyByWireSECSwitch: new offset_1.Offset({
        value: 0x7BA,
        name: 'flyByWireSECSwitch',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'fly by wire SEC switch',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    flyByWireSECCompFailFlag: new offset_1.Offset({
        value: 0x7BB,
        name: 'flyByWireSECCompFailFlag',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'fly by wire SEC comp fail flag (read only)',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    apMasterSwitch: new offset_1.Offset({
        value: 0x7BC,
        name: 'apMasterSwitch',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP master switch',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apWingLevel: new offset_1.Offset({
        value: 0x7C0,
        name: 'apWingLevel',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP wing level',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apNav1Hold: new offset_1.Offset({
        value: 0x7C4,
        name: 'apNav1Hold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP NAV1 hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apHeadingHold: new offset_1.Offset({
        value: 0x7C8,
        name: 'apHeadingHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP heading hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apHeadingValue: new offset_1.Offset({
        value: 0x7CC,
        name: 'apHeadingValue',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP heading value - degrees',
        convert: 'Math.round(({VAL} * 360) / 65536)',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    apAltitudeHold: new offset_1.Offset({
        value: 0x7D0,
        name: 'apAltitudeHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP altitude hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apAltitudeValue: new offset_1.Offset({
        value: 0x7D4,
        name: 'apAltitudeValue',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP altitude value - ft',
        convert: '+({VAL} * 3.28084 / 65536).toFixed(2)',
        type: 3 /* Int32 */,
        permission: 'rw',
    }),
    apAttitudeHold: new offset_1.Offset({
        value: 0x7D8,
        name: 'apAttitudeHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP attitude hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apAsHold: new offset_1.Offset({
        value: 0x7DC,
        name: 'apAsHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP airspeed hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apAsValue: new offset_1.Offset({
        value: 0x7E2,
        name: 'apAsValue',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP airspeed value - kt',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    apMachHold: new offset_1.Offset({
        value: 0x7E4,
        name: 'apMachHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP mach hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apMachValue: new offset_1.Offset({
        value: 0x7E8,
        name: 'apMachValue',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP mach value - mach',
        convert: '{VAL} / 65536',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apVsHold: new offset_1.Offset({
        value: 0x7EC,
        name: 'apVsHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP vertical speed hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apVsValue: new offset_1.Offset({
        value: 0x7F2,
        name: 'apVsValue',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP vertical speed value - ft/min',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    apRPMN1Hold: new offset_1.Offset({
        value: 0x7F4,
        name: 'apRPMN1Hold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP RPM/N1 hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apRPMN1Value: new offset_1.Offset({
        value: 0x7FA,
        name: 'apRPMN1Value',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP RPM/N1 value - percent',
        convert: 'Math.round({VAL} * 100 / 16384)',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apGlideSlopeHold: new offset_1.Offset({
        value: 0x7FC,
        name: 'apGlideSlopeHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP GlideSlope hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apApproachHold: new offset_1.Offset({
        value: 0x800,
        name: 'apApproachHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP Approach hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apBackCourseHold: new offset_1.Offset({
        value: 0x804,
        name: 'apBackCourseHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP back course hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apYawDamperHold: new offset_1.Offset({
        value: 0x808,
        name: 'apYawDamperHold',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP yaw damper hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apTOGAAutoThrottle: new offset_1.Offset({
        value: 0x80C,
        name: 'apTOGAAutoThrottle',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP TO/GA throttle hold',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    apAutoThrottleArm: new offset_1.Offset({
        value: 0x810,
        name: 'apAutoThrottleArm',
        category: offset_category_1.OffsetCategory.AUTOPILOT,
        description: 'AP autothrottle arm',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
};
