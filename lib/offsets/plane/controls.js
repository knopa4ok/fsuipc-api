"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const offset_category_1 = require("./../../../shared/offset-category");
const offset_1 = require("./../../../shared/offset");
exports.controls = {
    autoRudder: new offset_1.Offset({
        value: 0x278,
        name: 'autoRudder',
        category: offset_category_1.OffsetCategory.CONTROLS,
        description: 'auto coordination',
        convert: '!!{VAL}',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    leftAileronDeflection: new offset_1.Offset({
        value: 0x3B0,
        name: 'leftAileronDeflection',
        category: offset_category_1.OffsetCategory.CONTROLS,
        description: 'left aileron deflection - radians',
        type: 8 /* Double */,
        permission: 'r',
    }),
    rightAileronDeflection: new offset_1.Offset({
        value: 0x3B8,
        name: 'rightAileronDeflection',
        category: offset_category_1.OffsetCategory.CONTROLS,
        description: 'right aileron deflection - radians',
        type: 8 /* Double */,
        permission: 'r',
    }),
    rotorClutchSwitch: new offset_1.Offset({
        value: 0x889,
        name: 'rotorClutchSwitch',
        category: offset_category_1.OffsetCategory.CONTROLS,
        description: 'rotor clutch switch',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    propellerPitchControl: new offset_1.Offset({
        value: 0xAF0,
        name: 'propellerPitchControl',
        category: offset_category_1.OffsetCategory.CONTROLS,
        description: '0=fixed, 1=auto, 2=manual',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    elevatorPositionControl: new offset_1.Offset({
        value: 0xBB2,
        name: 'elevatorPositionControl',
        description: 'elevator position control - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    elevatorIndicator: new offset_1.Offset({
        value: 0xBB4,
        name: 'elevatorIndicator',
        description: 'elevator indicator',
        category: offset_category_1.OffsetCategory.CONTROLS,
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    aileronPositionControl: new offset_1.Offset({
        value: 0xBB6,
        name: 'aileronPositionControl',
        description: 'aileron position control - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    aileronIndicator: new offset_1.Offset({
        value: 0xBB8,
        name: 'aileronIndicator',
        description: 'aileron indicator',
        category: offset_category_1.OffsetCategory.CONTROLS,
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    rudderPositionControl: new offset_1.Offset({
        value: 0xBBA,
        name: 'rudderPositionControl',
        description: 'rudder position control - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    rudderIndicator: new offset_1.Offset({
        value: 0xBBC,
        name: 'rudderIndicator',
        description: 'rudder indicator',
        category: offset_category_1.OffsetCategory.CONTROLS,
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    elevatorTrimPositionControl: new offset_1.Offset({
        value: 0xBC0,
        name: 'elevatorTrimPositionControl',
        description: 'elevator trim position control - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    elevatorTrimIndicator: new offset_1.Offset({
        value: 0xBC2,
        name: 'elevatorTrimIndicator',
        description: 'elevator trim indicator',
        category: offset_category_1.OffsetCategory.CONTROLS,
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    leftBrakeApplication: new offset_1.Offset({
        value: 0xBC4,
        name: 'leftBrakeApplication',
        description: 'left brake application pressure - percent - will match 100% if parking brake on',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    rightBrakeApplication: new offset_1.Offset({
        value: 0xBC6,
        name: 'rightBrakeApplication',
        description: 'right brake application pressure - percent - will match 100% if parking brake on',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    parkingBrake: new offset_1.Offset({
        value: 0xBC8,
        name: 'parkingBrake',
        description: 'parking brake active',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'typeof {VAL} === `boolean` ? {VAL} ? 32767 : 0 : {VAL} >= 32767',
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    brakingIndicator: new offset_1.Offset({
        value: 0xBCA,
        name: 'brakingIndicator',
        description: 'braking indicator',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'appliedBrakes',
        mapping: true,
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    spoilersArm: new offset_1.Offset({
        value: 0xBCC,
        name: 'spoilersArm',
        description: 'spoilers arm indicator',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: '!!{VAL}',
        type: 3 /* Int32 */,
        permission: 'rw',
    }),
    spoilersControl: new offset_1.Offset({
        value: 0xBD0,
        name: 'spoilersControl',
        description: 'spoilers control - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'spoilersControl',
        mapping: true,
        type: 3 /* Int32 */,
        permission: 'rw',
    }),
    spoilerLeftPosition: new offset_1.Offset({
        value: 0xBD4,
        name: 'spoilerLeftPosition',
        description: 'left spoiler position - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'rw',
    }),
    spoilerRightPosition: new offset_1.Offset({
        value: 0xBD8,
        name: 'spoilerRightPosition',
        description: 'right spoiler position - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'rw',
    }),
    flapsControl: new offset_1.Offset({
        value: 0xBDC,
        name: 'flapsControl',
        description: 'flaps deployment - percent - for steps, depends on 0x3BFA',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'rw',
    }),
    flapsLeftPosition: new offset_1.Offset({
        value: 0xBE0,
        name: 'flapsLeftPosition',
        description: 'left flaps position indicator - percent - to get angle, depends on max',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    flapsRightPosition: new offset_1.Offset({
        value: 0xBE0,
        name: 'flapsRightPosition',
        description: 'right flaps position indicator - percent - to get angle, depends on max',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    gearControl: new offset_1.Offset({
        value: 0xBE8,
        name: 'gearControl',
        description: 'gear deploy - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'rw',
    }),
    gearNosePosition: new offset_1.Offset({
        value: 0xBEC,
        name: 'gearNosePosition',
        description: 'nose gear deploy - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    gearRightPosition: new offset_1.Offset({
        value: 0xBF0,
        name: 'gearRightPosition',
        description: 'nose gear deploy - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    gearLeftPosition: new offset_1.Offset({
        value: 0xBF4,
        name: 'gearLeftPosition',
        description: 'nose gear deploy - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    flapsHandleIndex: new offset_1.Offset({
        value: 0xBFC,
        name: 'flapsHandleIndex',
        description: '0 = full up',
        category: offset_category_1.OffsetCategory.CONTROLS,
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    rightToeBrakeControl: new offset_1.Offset({
        value: 0xC00,
        name: 'rightToeBrakeControl',
        description: 'right toe brake application - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 2)',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    leftToeBrakeControl: new offset_1.Offset({
        value: 0xC01,
        name: 'leftToeBrakeControl',
        description: 'left toe brake application - percent',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 2)',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    aileronTrimPosition: new offset_1.Offset({
        value: 0xC02,
        name: 'aileronTrimPosition',
        description: 'aileron trim position - percent - can be negative',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    rudderTrimPosition: new offset_1.Offset({
        value: 0xC04,
        name: 'rudderTrimPosition',
        description: 'rudder trim position - percent - can be negative',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    steeringTillerCalibratedValue: new offset_1.Offset({
        value: 0xC08,
        name: 'steeringTillerCalibratedValue',
        description: 'steering tiller calibrated value - percent - can be negative',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'r',
    }),
    rudderCalibratedvalue: new offset_1.Offset({
        value: 0xC0A,
        name: 'rudderCalibratedvalue',
        description: 'rudder calibrated value - percent - can be negative',
        category: offset_category_1.OffsetCategory.CONTROLS,
        convert: 'Math.round({VAL} / 16383 * 100)',
        type: 2 /* Int16 */,
        permission: 'r',
    }),
};
