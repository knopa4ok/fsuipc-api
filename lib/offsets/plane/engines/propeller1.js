"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const offset_1 = require("./../../../../shared/offset");
const offset_category_1 = require("./../../../../shared/offset-category");
exports.propeller1 = {
    propeller1RPM: new offset_1.Offset({
        value: 0x2400,
        name: 'propeller1RPM',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 RPM',
        type: 8 /* Double */,
        permission: 'r',
    }),
    propeller1RPMPercent: new offset_1.Offset({
        value: 0x2408,
        name: 'propeller1RPMPercent',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 RPM percent',
        convert: 'Math.round(+(+({VAL}).toFixed(4) * 100).toFixed(2))',
        type: 8 /* Double */,
        permission: 'r',
    }),
    propeller1Thrust: new offset_1.Offset({
        value: 0x2410,
        name: 'propeller1Thrust',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 thrust - lb',
        convert: '+({VAL}).toFixed(2)',
        type: 8 /* Double */,
        permission: 'r',
    }),
    propeller1BetaBladeAngle: new offset_1.Offset({
        value: 0x2418,
        name: 'propeller1BetaBladeAngle',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 beta blade angle - rad',
        convert: '+({VAL}).toFixed(4)',
        type: 8 /* Double */,
        permission: 'r',
    }),
    propeller1FeatheringInhibit: new offset_1.Offset({
        value: 0x2420,
        name: 'propeller1FeatheringInhibit',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 feathering inhibit',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    propeller1Feathered: new offset_1.Offset({
        value: 0x2424,
        name: 'propeller1Feathered',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 feathered',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    propeller1SyncDeltaLever: new offset_1.Offset({
        value: 0x2428,
        name: 'propeller1SyncDeltaLever',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 sync delta lever',
        type: 8 /* Double */,
        permission: 'r',
    }),
    propeller1AutofeatherArmed: new offset_1.Offset({
        value: 0x2430,
        name: 'propeller1AutofeatherArmed',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 autofeather armed flag',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    propeller1FeatherSwitch: new offset_1.Offset({
        value: 0x2434,
        name: 'propeller1FeatherSwitch',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 feather switch',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    propeller1PanelAutofeatherSwitch: new offset_1.Offset({
        value: 0x2438,
        name: 'propeller1PanelAutofeatherSwitch',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 panel autofeather switch',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    propeller1Sync: new offset_1.Offset({
        value: 0x243C,
        name: 'propeller1Sync',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 sync active',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
    propeller1DeiceSwitch: new offset_1.Offset({
        value: 0x2440,
        name: 'propeller1DeiceSwitch',
        category: offset_category_1.OffsetCategory.ENGINE,
        description: 'propeller 1 de-ice active',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'rw',
    }),
};
