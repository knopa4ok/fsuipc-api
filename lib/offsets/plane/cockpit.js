"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const offset_category_1 = require("./../../../shared/offset-category");
const offset_1 = require("./../../../shared/offset");
exports.cockpit = {
    navLights: new offset_1.Offset({
        value: 0x280,
        name: 'navLights',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'nav lights',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    strobeLights: new offset_1.Offset({
        value: 0x281,
        name: 'strobeLights',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'strobe lights',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    landingLights: new offset_1.Offset({
        value: 0x28C,
        name: 'landingLights',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'landing lights',
        convert: '!!{VAL}',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    lights: new offset_1.Offset({
        value: 0x0D0C,
        name: 'lights',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'all lights - FS2000+',
        type: 12 /* BitArray */,
        convert: 'lightsMapping',
        mapping: true,
        length: 2,
        permission: 'rw',
    }),
    alternateStaticAirSource: new offset_1.Offset({
        value: 0x29B,
        name: 'alternateStaticAirSource',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Alternate static air source selected',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    pitotHeat: new offset_1.Offset({
        value: 0x29C,
        name: 'pitotHeat',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'pitot heat active',
        convert: '!!{VAL}',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    altimeterSettings: new offset_1.Offset({
        value: 0x330,
        name: 'altimeterSettings',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'altimeters settings - mb',
        convert: '{VAL} / 16',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    altimeterSettingsG1000: new offset_1.Offset({
        value: 0x332,
        name: 'altimeterSettingsG1000',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'G1000 altimeters settings - mb',
        convert: '{VAL} / 16',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    turnCoordinatorPosition: new offset_1.Offset({
        value: 0x36E,
        name: 'turnCoordinatorPosition',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Turn coordinator ball position - + to the right, - to the left, 0 balanced',
        type: 1 /* SByte */,
        permission: 'r',
    }),
    turnRate: new offset_1.Offset({
        value: 0x37C,
        name: 'turnRate',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Turn rate needle - minutes (- to the left, + to the right)',
        type: 2 /* Int16 */,
        convert: 'Math.round({VAL} / 1024)',
        permission: 'r',
    }),
    preciseTurnCoordinatorPosition: new offset_1.Offset({
        value: 0x380,
        name: 'preciseTurnCoordinatorPosition',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Turn coordinator ball position - + to the right, - to the left, 0 balanced',
        type: 9 /* Single */,
        permission: 'r',
    }),
    preciseTurnRate: new offset_1.Offset({
        value: 0x384,
        name: 'preciseTurnRate',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Turn rate needle - minutes (- to the left, + to the right)',
        type: 9 /* Single */,
        permission: 'r',
    }),
    stallWarning: new offset_1.Offset({
        value: 0x36C,
        name: 'stallWarning',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'stall warning',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    overspeedWarning: new offset_1.Offset({
        value: 0x36D,
        name: 'overspeedWarning',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'overspeed warning',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    displayIAS: new offset_1.Offset({
        value: 0x612,
        name: 'displayIAS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'display IAS - <= FS2000',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    suctionPressure: new offset_1.Offset({
        value: 0xB18,
        name: 'suctionPressure',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'gyro suction - inHg',
        type: 8 /* Double */,
        permission: 'r',
    }),
    bleedAirSourceControl: new offset_1.Offset({
        value: 0xB50,
        name: 'bleedAirSourceControl',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: '0=Min, 1=auto, 2=Off, 3=APU, 4=Engines - FSX A321: 0=Auto, 1=Shut (off), 2=APU, 3=Engines',
        type: 0 /* Byte */,
        permission: 'rw',
    }),
    gyroDrift: new offset_1.Offset({
        value: 0xC3E,
        name: 'gyroDrift',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'gyro drift - degrees',
        convert: 'Math.round({VAL} * 360 / 65536)',
        type: 2 /* Int16 */,
        permission: 'rw',
    }),
    NDScale738A321EFIS: new offset_1.Offset({
        value: 0xE00,
        name: 'NDScale738A321EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default 738 and A321 EFIS: ND scale: 738: 0=5nm up to 7=640nm - A321: 0=10nm up to 5=320nm',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDMode738EFIS: new offset_1.Offset({
        value: 0xE02,
        name: 'NDMode738EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default 738 EFIS: ND mode:0=APP, 1=VOR, 2=MAP',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDMapItems738A321EFIS: new offset_1.Offset({
        value: 0xE04,
        name: 'NDMapItems738A321EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default 738 and A321 EFIS: ND map items shown: 738: 0=WPT, 1=APT, 2=NDB, 3=VOR - A321: 0=WPT, 1=VOR, 2=NDB, 3=APT',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDVORADF1Switch738EFIS: new offset_1.Offset({
        value: 0xE06,
        name: 'NDVORADF1Switch738EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default 738 EFIS: ND VOR/ADF1 switch: 0=VOR, 1=OFF, 2=ADF',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDVORADF2Switch738EFIS: new offset_1.Offset({
        value: 0xE08,
        name: 'NDVORADF2Switch738EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default 738 EFIS: ND VOR/ADF2 switch: 0=VOR, 1=OFF, 2=ADF',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDArcCentered738EFIS: new offset_1.Offset({
        value: 0xE0A,
        name: 'NDArcCentered738EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default 738 EFIS: ND arc=0, centred=1',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    autopilotSpeedSwitch738EFIS: new offset_1.Offset({
        value: 0xE0C,
        name: 'autopilotSpeedSwitch738EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default 738 EFIS: AP speed/mach C/O button (pressed if 1, not pressed if 0). ',
        convert: '!!{VAL}',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    NDModeA321EFIS: new offset_1.Offset({
        value: 0xE0E,
        name: 'NDModeA321EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default A321 EFIS: ND mode: 0=ILS, 1=VOR, 2=NAV, 3=ARC',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDVORADF1SwitchA321EFIS: new offset_1.Offset({
        value: 0xE10,
        name: 'NDVORADF1SwitchA321EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default A321 EFIS: ND VOR/ADF1 switch: 0=VOR, 1=OFF, 2=ADF',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDVORADF2SwitchA321EFIS: new offset_1.Offset({
        value: 0xE12,
        name: 'NDVORADF2SwitchA321EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default A321 EFIS: ND VOR/ADF2 switch: 0=VOR, 1=OFF, 2=ADF',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDInHghPASwitchA321EFIS: new offset_1.Offset({
        value: 0xE14,
        name: 'NDInHghPASwitchA321EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default A321 EFIS: ND InHg/hPA switch, 0=InHg, 1=hPA',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    NDILSSwitchA321EFIS: new offset_1.Offset({
        value: 0xE16,
        name: 'NDILSSwitchA321EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default A321 EFIS: ND ILS mode button, 0 = off, 1=on',
        convert: '!!{VAL}',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    autopilotSpeedSwitch321EFIS: new offset_1.Offset({
        value: 0xE18,
        name: 'autopilotSpeedSwitch321EFIS',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default 321 EFIS: AP speed/mach C/O button (pressed if 1, not pressed if 0). ',
        convert: '!!{VAL}',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    altitudeChangeRate321EFIS: new offset_1.Offset({
        value: 0xE1A,
        name: 'altitudeChangeRate',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Default A321 EFIS: Altitude change rate switch (0 = 100, 1=1000)',
        convert: '{VAL} === 0 ? 100 : 1000',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    fuelFlowAtCruise: new offset_1.Offset({
        value: 0x1270,
        name: 'fuelFlowAtCruise',
        category: offset_category_1.OffsetCategory.COCKPIT,
        description: 'Estimated fuel flow at cruise - lb/h',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
};
