"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const offset_category_1 = require("./../../../shared/offset-category");
const offset_1 = require("./../../../shared/offset");
exports.plane = {
    vs0: new offset_1.Offset({
        value: 0x538,
        name: 'vs0',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'Stall speed full flaps - kt',
        convert: 'ftsecToKt',
        mapping: true,
        type: 8 /* Double */,
        permission: 'r',
    }),
    vs1: new offset_1.Offset({
        value: 0x540,
        name: 'vs1',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'Stall speed clean - kt',
        convert: 'ftsecToKt',
        mapping: true,
        type: 8 /* Double */,
        permission: 'r',
    }),
    vc: new offset_1.Offset({
        value: 0x548,
        name: 'vc',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'Cruise speed - kt',
        convert: 'ftsecToKt',
        mapping: true,
        type: 8 /* Double */,
        permission: 'r',
    }),
    vmd: new offset_1.Offset({
        value: 0x550,
        name: 'vmd',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'Minimum drag speed - kt',
        convert: 'ftsecToKt',
        mapping: true,
        type: 8 /* Double */,
        permission: 'r',
    }),
    smokeSystemControl: new offset_1.Offset({
        value: 0x5D8,
        name: 'smokeSystemControl',
        category: offset_category_1.OffsetCategory.PLANE,
        convert: '!!{VAL}',
        description: 'smoke system control on/off',
        type: 5 /* UInt16 */,
        permission: 'rw',
    }),
    retractableGear: new offset_1.Offset({
        value: 0x60C,
        name: 'retractableGear',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'retractable gear (read only)',
        convert: '!!{VAL}',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    retractableLeftFloatExtension: new offset_1.Offset({
        value: 0x614,
        name: 'retractableLeftFloatExtension',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'retractable left float extension - percent',
        convert: 'Math.floor({VAL} / 16384 * 100)',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    retractableRightFloatExtension: new offset_1.Offset({
        value: 0x616,
        name: 'retractableRightFloatExtension',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'retractable right float extension - percent',
        convert: 'Math.floor({VAL} / 16384 * 100)',
        type: 5 /* UInt16 */,
        permission: 'r',
    }),
    hasFlaps: new offset_1.Offset({
        value: 0x778,
        name: 'hasFlaps',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'has flaps',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    hasStallHorn: new offset_1.Offset({
        value: 0x77C,
        name: 'hasStallHorn',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'has stall horn',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    hasMixtureEngine: new offset_1.Offset({
        value: 0x780,
        name: 'hasMixtureEngine',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'has mixture engine',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    hasCarbHeat: new offset_1.Offset({
        value: 0x784,
        name: 'hasCarbHeat',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'has carburator heater',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    hasSpoilers: new offset_1.Offset({
        value: 0x78C,
        name: 'hasSpoilers',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'has spoilers',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    isTailDragger: new offset_1.Offset({
        value: 0x790,
        name: 'isTailDragger',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'has spoilers',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    hasStrobes: new offset_1.Offset({
        value: 0x794,
        name: 'hasStrobes',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'has strobes',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    hasToeBrakes: new offset_1.Offset({
        value: 0x79C,
        name: 'hasToeBrakes',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'has toe brakes',
        convert: '!!{VAL}',
        type: 6 /* UInt32 */,
        permission: 'r',
    }),
    maxMach: new offset_1.Offset({
        value: 0xB0C,
        name: 'maxMach',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'mach maximum operating - not FS2004',
        convert: '+({VAL} / 20438).toFixed(2)',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    fuelSelectorsCount: new offset_1.Offset({
        value: 0x123E,
        name: 'fuelSelectorsCount',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'number of fuel selectors for the aircraft',
        type: 0 /* Byte */,
        permission: 'r',
    }),
    aircraftEmptyWeight: new offset_1.Offset({
        value: 0x1330,
        name: 'aircraftEmptyWeight',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'aicraft empty weight',
        convert: '+({VAL} / 256).toFixed(2)',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
    aircraftMaxGrossWeight: new offset_1.Offset({
        value: 0x1334,
        name: 'aircraftMaxGrossWeight',
        category: offset_category_1.OffsetCategory.PLANE,
        description: 'aicraft max gross weight',
        convert: '+({VAL} / 256).toFixed(2)',
        type: 3 /* Int32 */,
        permission: 'r',
    }),
};
